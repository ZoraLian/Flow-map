(function (React, ReactDOM, d3$1, topojson) {
  'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  // Get the topojson from world-atlas and convert to geojson data for later to graph the World

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useData = () => {
    const [data, setData] = React.useState(null);
    //console.log(data);

    React.useEffect(() => {
      d3$1.json(jsonUrl).then(topology => {
        const { countries } = topology.objects;
        setData({
          countries: topojson.feature(topology, countries),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  // Get the immidata from my Gist


  const dataUrl ="https://gist.githubusercontent.com/serjunfan/11f2e26371afcb897fdbed8ac26ff5bf/raw/ec9a0d9b4e6c5dbce4a65eb1cf7730f868c9704f/2020_Russia_ver1.csv";
  const immiData1 = () => {
    const [data, setData] = React.useState(null);
    React.useEffect(() => {
      d3$1.csv(dataUrl).then(setData);
    },[]);

    return data;
  };

  // Set up the coordinates for later to graph the Lines. Only 2020's data are set up 
  const setuppoints = ( countrytable,immidata ) => {
      const des = "Region, development group, country or area of destination";
      const ori = "Region, development group, country or area of origin";
      immidata.forEach( d => {
      d[des] = d[des].trim().replace('*','');
      d[ori] = d[ori].trim().replace('*','');
      });
      for( let i = 0 ; i < immidata.length ; i++){
        if(countrytable.has(immidata[i][des]) 
           && countrytable.has(immidata[i][ori]
             )){
          immidata[i]["coordinates"] = [countrytable.get(immidata[i][des]),countrytable.get(immidata[i][ori])];
          immidata[i]["type"] = "LineString";
        }
        else {
          immidata.splice(i,1);
          i--;
          }
        }
      for( let i = 0 ; i < immidata.length ; i++){
        if(immidata[i]['2020'] == '..' ){
          immidata.splice(i,1);
          i--;
        }
      }
    };

  const setUpdata = (coordata ,immidata) => {
  const countrytable = new Map();
    coordata.forEach((d, i) => {
      d['points'] = [+d.longitude, +d.latitude];
    });
    coordata.forEach((d, i) => {
      if (d.name == 'United States')
        countrytable.set(
          'United States of America',
          d.points
        );
      else countrytable.set(d.name, d.points);
    });
    setuppoints(countrytable, immidata);
      immidata.forEach( d =>{
      if(typeof(d['2020']) === "string")
        d['2020'] = +( (d['2020']).replace(/\s/g, '')) ;
    });
  };

  // Get the immidata from my Gist

  const dataUrl$1 ="https://gist.githubusercontent.com/serjunfan/42a3c78447ee2d947681451105366e6a/raw/bb53c438beec9253d78985330bfedafa87386f13/coordinate.csv";
  const coorData = () => {
    const [data, setData] = React.useState(null);
    React.useEffect(() => {
      d3$1.csv(dataUrl$1).then(setData);
    },[]);
    
    return data;
  };

  // Graph the World map and the line based on immigrants
  const projection = d3$1.geoNaturalEarth1();
  const path = d3$1.geoPath(projection);
  const graticule = d3$1.geoGraticule();
    
  const d3line = d3.line()
  			.x(function(d){ return d.x; })
        .y(function(d){ return d.y; })
        .curve(d3.curveLinear);

  const Marks = () => {
    const [selected, setSelected] = React.useState('Brazil');
    const handleClick = (e) => {
      if (selected == e.currentTarget.getAttribute('title')) {
        setSelected(null);
      } else {
        setSelected(e.currentTarget.getAttribute('title'));
      }
    };

    const coordata = coorData();
    const graphdata = useData();
    const immidata = immiData1();
    if (!graphdata || !immidata || !coordata) {
      return React__default.createElement( 'pre', null, "Loading..." );
    }
    setUpdata(coordata, immidata);
    let filterdata = [] ;
    if( selected !== null){ 
     filterdata = immidata.filter(
      (d) =>
        d[
          'Region, development group, country or area of origin'
        ] == selected
    );
    }
    else
      filterdata = immidata;
    const nodes = {};
    let results = [];
    if( filterdata.length != 0 ){
    filterdata.forEach( (d,i)=> {
      nodes[`${i}`] = {x:projection(d.coordinates[0])[0] ,y:projection(d.coordinates[0])[1]} ;
    });
    console.log(Object.keys(nodes).length);
      nodes[`${Object.keys(nodes).length}`] = {x:projection(filterdata[0].coordinates[1])[0],
                             y:projection(filterdata[0].coordinates[1])[1]};
      
      const edges = filterdata.map( (d,i) => {
       let obj = {};
       obj['source'] = `${Object.keys(nodes).length-1}`;
       obj['target'] = `${i}`;
       return obj;
     });
      console.log(nodes);
      console.log(edges);
    const fbundling = d3.ForceEdgeBundling()   
  				.nodes(nodes)
  				.edges(edges);
    
  	 results = fbundling();
    }
    
    console.log(filterdata);
    console.log(selected);
    return (
      React__default.createElement( 'g', { className: "marks" },
        graphdata.countries.features.map((feature) => (
          React__default.createElement( 'path', {
            className: "country", d: path(feature), cursor: 'pointer', title: feature.properties.name, onClick: (e) => handleClick(e), fill: selected == feature.properties.name
                ? 'red'
                : '#e9f3e5' })
        )),
        results.map( d => (
          React__default.createElement( 'path', { className: "flows", d: d3line(d), stroke: '#36dad2', fill: 'none', 'stroke-width': 1, 'stroke-opacity': 0.15 }) ) 
                    ),
        filterdata.map ( d => 
          (
            React__default.createElement( 'circle', {
              r: 2, cx: projection(d.coordinates[0])[0], cy: projection(d.coordinates[0])[1], onClick: (e) => handleClick(e), cursor: 'pointer', fill: '#fbf419', stroke: '#252525' }) 
       ) ),  
        React__default.createElement( 'path', {
          className: "interiors", d: path(graphdata.interiors) })
      )
    );
  };

  /*    {immidata.map( d => (
     
     <path className="flows" d={path(d)} />
      )) 
       }
                 <path
              className="flows"
              d={path(d)}
              stroke={'#60c7ef'}
              stroke-opacity={0.5}
              fill={'none'}
              stroke-width={sizeScale(d['2020'])}
            />
       <circle
              r={2}
              cx={projection(d.coordinates[0])[0]}
              cy={projection(d.coordinates[0])[1]}
              onClick={(e) => handleClick(e)}
              cursor={'pointer'}
              fill={'white'}
              opacity={0.6}
              stroke={'#252525'}
            />
             <path
          className="sphere"
          d={path({ type: 'Sphere' })}
        />
        <path className="graticules" d={path(graticule())} /> */

  //Main function. Actually a React H

  const width = 960;
  const height = 500;

  const App = () => {
    const svgRef = React.useRef();
    const gRef = React.useRef();
    React.useEffect( () => {
      const svg = d3.select(svgRef.current);
      const g = d3.select(gRef.current);
      const zoomFunc = d3.zoom().scaleExtent([0.8,5])
      .translateExtent([[0,0],[width,height]])
      .on("zoom", () =>{
        g.attr('transform',d3.event.transform);
        console.log("zoomed");
        });
      zoomFunc(svg);
    } );
    return (
      React__default.createElement( 'svg', { width: width, height: height, ref: svgRef, fill: "current", stroke: "current" },
        React__default.createElement( 'g', { ref: gRef },
           React__default.createElement( 'rect', { fill: "#110577", width: width, height: height }),
            React__default.createElement( Marks, null )
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
